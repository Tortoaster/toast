services:
  tortoaster:
    profiles: [ "full" ]
    build:
      dockerfile: "Dockerfile"
    pull_policy: build
    ports: [ "8000:8000" ]
    environment:
      HOST: "0.0.0.0"
      RUST_LOG: "tortoaster=info,warn"
      DATABASE__URL: "postgres://tortoaster:password@db/tortoaster"
      S3__ENDPOINT_URL: "http://object-store:9000/"
      S3__ACCESS_KEY_ID: "tortoaster"
      S3__SECRET_ACCESS_KEY: "password"
      OIDC__CLIENT_ID: "tortoaster"
      OIDC__CLIENT_SECRET: "UzuoAuMFtHuf4USSl2CVGmgXockttxxh"
      OIDC__ISSUER_URL: "http://iam-provider:8003/realms/tortoaster"
      OIDC__REDIRECT_URL: "http://localhost:8000/projects"
      CACHE__HOST: "cache"
    depends_on:
      db-migrate:
        condition: service_completed_successfully
      object-store-migrate:
        condition: service_completed_successfully
      cache:
        condition: service_started

  tailwindcss:
    build:
      dockerfile: "Dockerfile"
      target: "tailwindcss"
    working_dir: "/app"
    command: [ "-i", "./input.css", "-o", "./static/style.css", "-m" ]
    volumes:
      - "./tailwind:/app"
      - "./templates:/app/templates:ro"
      - "./static:/app/static"
    user: "1000:1000"

  db:
    image: postgres:16.2
    ports: [ "5432:5432" ]
    volumes: [ "./postgres:/docker-entrypoint-initdb.d:ro" ]
    environment:
      POSTGRES_USER: "tortoaster"
      POSTGRES_PASSWORD: "password"
    healthcheck:
      test: "pg_isready"
      interval: 1s
      retries: 10

  db-migrate:
    build:
      dockerfile: "sqlx.Dockerfile"
    working_dir: "/app"
    command: [ "migrate", "run", "--source", "migrations", "--source", "fixtures" ]
    volumes:
      - "./migrations:/app/migrations:ro"
      - "./fixtures:/app/fixtures:ro"
    environment:
      DATABASE_URL: "postgres://tortoaster:password@db/tortoaster"
    depends_on:
      iam-provider:
        condition: service_healthy

  object-store:
    image: quay.io/minio/minio
    command: "server /data --address 0.0.0.0:9000 --console-address 0.0.0.0:8001"
    ports:
      - "9000:9000"
      - "8001:8001"
    environment:
      MINIO_HOST: "0.0.0.0"
      MINIO_ROOT_USER: "tortoaster"
      MINIO_ROOT_PASSWORD: "password"
    healthcheck:
      test: "curl -I http://localhost:9000/minio/health/live"
      interval: 1s
      retries: 10

  object-store-migrate:
    image: quay.io/minio/mc
    volumes: [ "./bucket_data:/app:ro" ]
    depends_on:
      object-store:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c " \
        /usr/bin/mc alias set myminio http://object-store:9000 tortoaster password && \
        /usr/bin/mc mb --ignore-existing --region "eu-central-1" --with-versioning myminio/tortoaster-content && \
        /usr/bin/mc mb --ignore-existing --region "eu-central-1" myminio/tortoaster-thumbnails && \
        /usr/bin/mc mb --ignore-existing --region "eu-central-1" --with-versioning myminio/tortoaster-system && \
        /usr/bin/mc anonymous set public myminio/tortoaster-content && \
        /usr/bin/mc anonymous set public myminio/tortoaster-thumbnails && \
        /usr/bin/mc anonymous set public myminio/tortoaster-system && \
        /usr/bin/mc mirror --overwrite /app/content myminio/tortoaster-content && \
        /usr/bin/mc mirror --overwrite /app/thumbnails myminio/tortoaster-thumbnails && \
        /usr/bin/mc mirror --overwrite /app/system myminio/tortoaster-system \
      "

  smtp-server:
    image: marlonb/mailcrab:v1.1.0
    ports: [ "8002:8002" ]
    environment:
      HTTP_PORT: "8002"
      SMTP_PORT: "25"

  iam-provider:
    image: quay.io/keycloak/keycloak:24.0
    volumes: [ "./keycloak:/opt/keycloak/data/import:ro" ]
    ports: [ "8003:8003" ]
    environment:
      KEYCLOAK_ADMIN: "tortoaster"
      KEYCLOAK_ADMIN_PASSWORD: "password"
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://db/tortoaster"
      KC_DB_USERNAME: "tortoaster"
      KC_DB_PASSWORD: "password"
      KC_DB_SCHEMA: "keycloak"
      KC_HTTP_PORT: "8003"
      KC_HEALTH_ENABLED: "true"
    command: "start-dev --import-realm"
    depends_on:
      db:
        condition: service_healthy
      smtp-server:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8003;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3" ]
      interval: 5s
      retries: 5

  cache:
    image: redis:alpine
    ports: [ "6379:6379" ]
